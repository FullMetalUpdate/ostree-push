#!/usr/bin/python3

from __future__ import print_function

from argparse import ArgumentParser
from enum import Enum
from gi.repository import GLib, Gio, OSTree
from pushlib import *
import random
import struct
import sys

class OSTreeReceiver(object):
    def __init__(self, repopath):
        self.repopath = repopath

        if args.repo is None:
            self.repo = OSTree.Repo.new_default()
        else:
            self.repo = OSTree.Repo.new(Gio.File.new_for_path(self.repopath))
        self.repo.open(None)

        self.writer = PushMessageWriter(sys.stdout.buffer)
        self.reader = PushMessageReader(sys.stdin.buffer)

    def close(self):
        sys.stdout.close()

    def run(self):
        update_refs = {}

        # Wait for getrefs
        recvcmd, recvargs = self.reader.read()
        if recvcmd is None:
            raise PushException('Expected reply, got none')
        if recvcmd != PushCommandType.getrefs:
            raise PushException('Unexpected reply type', recvcmd.name)

        # Send back refs
        sendcmd = PushCommandType.putrefs
        branches = recvargs['branches']
        if not branches:
            _, refs = self.repo.list_refs(None, None)
            # Re-encode revision to variant
            for branch in refs:
                refs[branch] = GLib.Variant('s', refs[branch])
        else:
            refs = {}
            for branch in branches:
                _, rev = self.repo.resolve_rev(branch, True)
                if rev:
                    refs[branch] = GLib.Variant('s', rev)
        sendargs = refs
        command = PushCommand(sendcmd, sendargs)
        self.writer.write(command)

        # Wait for update command
        recvcmd, recvargs = self.reader.read()
        if recvcmd is None:
            # No update needed
            return self.close()
        if recvcmd != PushCommandType.update:
            raise PushException('Unexpected reply type', recvcmd.name)
        for branch in recvargs.keys():
            fromrev = recvargs[branch]['from']
            torev = recvargs[branch]['to']
            update_refs[branch] = fromrev, torev
            print('Will update', branch, fromrev, 'to', torev, file=sys.stderr)

if __name__ == '__main__':
    aparser = ArgumentParser(description='Receive pushed ostree objects')
    aparser.add_argument('--repo', help='repository path')
    args = aparser.parse_args()

    receiver = OSTreeReceiver(args.repo)
    receiver.run()
