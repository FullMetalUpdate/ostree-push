#!/usr/bin/python3

from __future__ import print_function

from argparse import ArgumentParser
from enum import Enum
from gi.repository import GLib, Gio, OSTree
from pushlib import *
import random
import struct
import sys

class OSTreeReceiver(object):
    def __init__(self, repopath):
        self.repopath = repopath

        if args.repo is None:
            self.repo = OSTree.Repo.new_default()
        else:
            self.repo = OSTree.Repo.new(Gio.File.new_for_path(self.repopath))
        self.repo.open(None)

        self.writer = PushMessageWriter(sys.stdout.buffer)
        self.reader = PushMessageReader(sys.stdin.buffer)

        # Set a sane umask before writing any objects
        os.umask(0o0022)

    def close(self):
        sys.stdout.close()

    def run(self):
        # Send info immediately
        self.writer.send_info(self.repo)

        # Wait for update or done command
        cmdtype, args = self.reader.receive([PushCommandType.update,
                                             PushCommandType.done])
        if cmdtype == PushCommandType.done:
            return 0
        update_refs = args
        for branch, revs in update_refs.items():
            # Check that each branch can be updated appropriately
            _, current = self.repo.resolve_rev(branch, True)
            if current is None:
                # From commit should be all 0s
                if revs[0] != '0' *64:
                    self.writer.send_status(False,
                                            'Invalid from commit %s '
                                            'for new branch %s'
                                            %(revs[0], branch))
                    return 1
            elif revs[0] != current:
                self.writer.send_status(False,
                                        'Branch %s is at %s, not %s'
                                        %(branch, current, revs[0]))
                return 1

        # All updates valid
        self.writer.send_status(True)

        # Wait for putobject or done command
        received_objects = []
        while True:
            cmdtype, args = self.reader.receive([PushCommandType.putobject,
                                                 PushCommandType.done])
            if cmdtype == PushCommandType.done:
                logging.info('Received done, exiting putobject loop')
                break

            self.reader.receive_putobject_data(self.repo, args)
            received_objects.append(args['object'])
            self.writer.send_status(True)

        # Got all objects, move them to the object store
        for obj in received_objects:
            tmp_path = ostree_tmp_path(self.repo, obj)
            obj_path = ostree_object_path(self.repo, obj)
            os.makedirs(os.path.dirname(obj_path), exist_ok=True)
            logging.info('Renaming {} to {}'.format(tmp_path, obj_path))
            os.rename(tmp_path, obj_path)

        # Finally, update the refs
        for branch, revs in update_refs.items():
            logging.info('Setting ref {} to {}'.format(branch, revs[1]))
            self.repo.set_ref_immediate(None, branch, revs[1], None)

        return 0

if __name__ == '__main__':
    aparser = ArgumentParser(description='Receive pushed ostree objects')
    aparser.add_argument('--repo', help='repository path')
    aparser.add_argument('-v', '--verbose', action='store_true',
                         help='enable verbose output')
    aparser.add_argument('--debug', action='store_true',
                         help='enable debugging output')
    args = aparser.parse_args()

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG
    logging.basicConfig(format='%(module)s: %(funcName)s: %(levelname)s: %(message)s',
                        level=loglevel, stream=sys.stderr)

    receiver = OSTreeReceiver(args.repo)
    exit(receiver.run())
